- content_for :header do
  %header#main-header.dashboard{:role => "banner"}
    = link_to 'GCES', root_path, class: 'site-brand version2'
    %nav.main-menu.menu-horizontal{:role => "navigation"}
      %ul
        %li
          %a{:href => "index-2.html"} Company
        %li
          = link_to 'Projects', projects_path
        %li
          %a{:href => ""} Reports
        %li
          %a{:href => ""} Account
        %li
          = link_to 'Taxonomy', taxonomy_users_path

%header.message-center-header
  %nav
    %ul.menu-vertical.menu-style-2
      = mailbox_section 'inbox', @box, {} , @mailbox_unread_count
      = mailbox_section 'sent', @box
      = mailbox_section 'flagged', @box
      = mailbox_section 'trash', @box
    %a.message-write.icon-write{:href => "", :title => "Create Message"} Create Message
    .go-back.icon-arrow-left Back
%section.page-content.message-center-content
  %section.message-selection
    %header
      .ui-sort{"data-toggle-container" => ""}
        .sort-by.dropdown-toggle{"data-target" => "sort-options", "data-type" => "cm-toggle"}
          Sort by
          %span.type-dark.icon-arrow-down Date
        %ul.dropdown-menu{"data-section" => "sort-options"}
          %li.dropdown-option= sort_link(@q, :updated_at, 'Date')
          %li.dropdown-option= sort_link(@q, :notification_sender_first_name, 'Name')
          %li.dropdown-option= sort_link(@q, :subject, 'Subject')
      .mini-search
        = form_tag conversations_path, method: :get do
          = text_field_tag :keyword, params[:keyword]
    %ul.list-blocks.list-messages
      = render 'conversations/inbox', conversations: @messages
  %section.message-thread
    - @messages.each do |conversation|
      %section.message-thread-container{'data-message-id'=>conversation.id, class: (params[:active_id].to_i == conversation.id ? 'is-active' : '')}
        %header.message-thread-head
          %ul.menu-horizontal
            %li
              %a.message-reply.icon-reply-3{:href => ""} Reply
            %li
              - unless conversation.is_trashed?(pundit_user)
                - if conversation.is_flagged?(pundit_user)
                  = link_to 'Move to UnFlag', remove_mark_flag_conversation_path(conversation), class: 'message-flag icon-flag-remove',
                    method: :post
                - else
                  = link_to 'Move to Flag', mark_flag_conversation_path(conversation), class: 'message-flag icon-flag-2',
                    method: :post
            %li
              - if conversation.is_trashed?(pundit_user)
                = link_to 'Restore', restore_conversation_path(conversation), class: 'icon-reload', method: :post
              - else
                = link_to 'Move to Trash', conversation_path(conversation), class: 'message-delete icon-trashbin-full',
                  method: :delete, data: {confirm: 'Are you sure?'}
        - conversation.messages.each_with_index do |message, key|
          %article.message-entity
            %header.message-head
              .message-meta
                - if message.sender_type == 'Admin'
                  %span.message-from= message.sender.full_name + ' - Admin'
                - else
                  %span.message-from= message.sender.full_name
                -#to
                -#%span.message-to Aime Menendez
              %h2.message-subject= conversation.subject
              %figure.user-thumbnail
                - if message.sender_type == 'Consultant'
                  = image_tag(message.sender.profile_image.url(:thumb), class: '')
                - elsif message.sender_type == 'User'
                  = image_tag(message.sender.consultant.profile_image.url(:thumb), class: '')
                - else
                  = image_tag('missing.png', class: '')
              .message-timestamp= message.created_at.strftime('%B %d at %I:%M %p')
            .message-body
              = simple_format message.body
              - unless message.attachment.blank?
                .message-attachment
                  %ul
                    %li.icon-attachment
                      = link_to File.basename(message.attachment.url), message.attachment.url, target: '_blank'
            - if key == conversation.messages.size - 1
              .message-reply-form
                = simple_form_for @message, html: { multipart: true },
                  url:    reply_conversation_path(conversation),
                  method: :post do |f|
                  = f.input :message, as: :text, label: false, required: false, input_html: {class: 'm-b-xs'}
                  = f.input :attachment, as: :file, label: false, required: false
                  = f.button :submit, 'Send Message'